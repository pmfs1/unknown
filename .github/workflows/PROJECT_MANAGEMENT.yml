# PROJECT MANAGEMENT WORKFLOW - DESIGN TO MANAGE GITHUB PROJECT BOARD FROM ISSUE/PULL REQUEST EVENTS
name: 'PROJECT MANAGEMENT'
on:
  issues:
    types: [ opened, edited, deleted, closed, reopened, assigned, unassigned, labeled, unlabeled, milestoned, demilestoned ]
    branches: [ "trunk" ]
  pull_request:
    types: [ assigned, unassigned, labeled, unlabeled, opened, edited, closed, reopened, synchronize, converted_to_draft, milestoned, demilestoned, merged ]
    branches: [ "trunk" ]
permissions:
  contents: read
  issues: write
  pull-requests: write
  repository-projects: write
jobs:
  PROJECT_MANAGEMENT:
    name: 'PROJECT MANAGEMENT'
    runs-on: ubuntu-latest
    steps:
      - name: 'CHECKOUT'
        uses: actions/checkout@v4
      # IF ISSUE IS OPENED OR REOPENED SET PROJECT BOARD COLUMN TO "TODO"
      - name: 'SET TODO ON ISSUE OPEN/REOPEN'
        if: ${{ github.event_name == 'issues' && (github.event.action == 'opened' || github.event.action == 'reopened') }}
        run: |
          gh project update ${{ github.event.project.id }} --column-id ${{ github.event.project.columns.TODO.id }} --content-id ${{ github.event.issue.number }}
      # IF PR IS OPENED OR REOPENED SET PROJECT BOARD COLUMN TO "TODO"
      - name: 'SET TODO ON PR OPEN/REOPEN'
        if: ${{ github.event_name == 'pull_request' && (github.event.action == 'opened' || github.event.action == 'reopened') }}
        run: |
          gh project update ${{ github.event.project.id }} --column-id ${{ github.event.project.columns.TODO.id }} --content-id ${{ github.event.pull_request.number }}
      # IF PR IS MERGED SET PROJECT BOARD COLUMN TO "DONE"
      - name: 'SET DONE ON PR MERGE'
        if: ${{ github.event_name == 'pull_request' && github.event.action == 'merged' }}
        run: |
          gh project update ${{ github.event.project.id }} --column-id ${{ github.event.project.columns.DONE.id }} --content-id ${{ github.event.pull_request.number }}
      # IF ISSUE IS CLOSED SET PROJECT BOARD COLUMN TO "DONE"
      - name: 'SET DONE ON ISSUE CLOSE'
        if: ${{ github.event_name == 'issues' && github.event.action == 'closed' }}
        run: |
          gh project update ${{ github.event.project.id }} --column-id ${{ github.event.project.columns.DONE.id }} --content-id ${{ github.event.issue.number }}
      # COMPARE THE PROJECTS FIELDS WITH THE LABELS AND UPDATE THE FIELD ACCORDINGLY
      # FOR EACH PROJECT FIELD THERE'S A CORRESPONDING LABEL
      # THE LABEL FORMAT IS "FIELD:VALUE"
      # THE EXISTING LABELS ARE: "STATUS:TODO", "STATUS:WORK-IN-PROGRESS", "STATUS:DONE", "PRIORITY:TRIVIAL", "PRIORITY:MINOR", "PRIORITY:MAJOR", "PRIORITY:CRITICAL", "TYPE:PATCH", "TYPE:FEATURE"
      - name: 'UPDATE PROJECT FIELDS, MILESTONE, AND ITERATION'
        run: |
          # [TODO] - USE GH CLI INSTEAD OF CURL
      # IF ISSUE IS DELETED REMOVE IT FROM THE PROJECT BOARD
      - name: 'REMOVE ISSUE FROM PROJECT BOARD'
        if: ${{ github.event_name == 'issues' && github.event.action == 'deleted' }}
        run: |
          # [TODO] - USE GH CLI INSTEAD OF CURL
      # IF PR IS CLOSED REMOVE IT FROM THE PROJECT BOARD
      - name: 'REMOVE PR FROM PROJECT BOARD'
        if: ${{ github.event_name == 'pull_request' && github.event.action == 'closed' }}
        run: |
          # [TODO] - USE GH CLI INSTEAD OF CURL)
      # WHEN AN ISSUE OR PULL REQUEST IS ASSIGNED OR UNASSIGNED: IF THERE'S NO ASSIGNY, SET ASSIGNY TO THE REPO'S OWNER
      - name: 'UPDATE ASSIGNEE'
        if: ${{ github.event_name == 'issues' && (github.event.action == 'assigned' || github.event.action == 'unassigned') || github.event_name == 'pull_request' && (github.event.action == 'assigned' || github.event.action == 'unassigned') }}
        run: |
          # IF IT'S AN ISSUE
          if [[ "${{ github.event_name }}" == "issues" ]]; then
            if [[ -z "${{ github.event.issue.assignee }}" ]]; then
              gh issue update ${{ github.event.issue.number }} --assignee ${{ github.repository.owner }}
            fi
          # IF IT'S A PR
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            if [[ -z "${{ github.event.pull_request.assignee }}" ]]; then
              gh issue update ${{ github.event.issue.number }} --assignee ${{ github.repository.owner }}
            fi
          fi
      # WHEN AN ISSUE OR PR IS CREATED/OPENED AUTO-ASSIGN IT TO THE REPO'S OWNER
      - name: 'AUTO-ASSIGN TO REPO OWNER'
        if: ${{ github.event_name == 'issues' && github.event.action == 'opened' || github.event_name == 'pull_request' && github.event.action == 'opened' }}
        run: |
          # IF IT'S AN ISSUE
          if [[ "${{ github.event_name }}" == "issues" ]]; then
            gh issue update ${{ github.event.issue.number }} --assignee ${{ github.repository.owner }}
          # IF IT'S A PR
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            gh issue update ${{ github.event.issue.number }} --assignee ${{ github.repository.owner }}
          fi
      # WHEN A PR IS CREATED, INFER IT'S TYPE BASED ON GITHUB_REF AND SET THE PROJECT TYPE FIELD ACCORDINGLY
      # IF THE PR IS A PATCH, SET THE TYPE FIELD TO "PATCH" IF BRANCH NAME STARTS WITH 'patch/'
      # IF THE PR IS A FEATURE, SET THE TYPE FIELD TO "FEATURE": IF BRANCH NAME STARTS WITH 'dev/'
      - name: 'INFER PR TYPE'
        if: ${{ github.event_name == 'pull_request' && github.event.action == 'opened' }}
        run: |
          if [[ "${{ github.GITHUB_REF }}" == "refs/heads/patch/"* ]]; then
            gh issue update ${{ github.event.issue.number }} --label "TYPE:PATCH"
          elif [[ "${{ github.GITHUB_REF }}" == "refs/heads/dev/"* ]]; then
            gh issue update ${{ github.event.issue.number }} --label "TYPE:FEATURE"
          fi